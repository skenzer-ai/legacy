#!/usr/bin/env python3
"""
Test script for Man-O-Man Conflict Detector Engine.
Tests conflict detection functionality in isolation.
"""

import sys
sys.path.append('/home/heramb/source/augment/legacy/backend')

import asyncio
from datetime import datetime

from backend.app.core.manoman.engines.conflict_detector import ConflictDetector
from backend.app.core.manoman.models.service_registry import (
    ServiceRegistry,
    ServiceDefinition,
    ServiceOperation,
    OperationType,
    TierLevel,
    APIEndpoint
)


def create_test_services_with_conflicts():
    """Create test services with intentional conflicts"""
    
    # Service 1: User management
    user_service = ServiceDefinition(
        service_name="user_management",
        service_description="User account management service",
        business_context="Handles user accounts, profiles, and authentication",
        keywords=["user", "account", "profile", "authentication", "login"],
        synonyms=["person", "individual", "member"],
        tier1_operations={
            "list_users": ServiceOperation(
                endpoint=APIEndpoint(
                    path="/users",
                    method="GET",
                    operation_id="listUsers",
                    description="List all users"
                ),
                intent_verbs=["list", "get", "retrieve"],
                intent_objects=["users", "accounts"],
                description="List all users in the system"
            ),
            "create_user": ServiceOperation(
                endpoint=APIEndpoint(
                    path="/users",
                    method="POST",
                    operation_id="createUser",
                    description="Create new user"
                ),
                intent_verbs=["create", "add", "register"],
                intent_objects=["user", "account"],
                description="Create a new user account"
            )
        },
        tier2_operations={}
    )
    
    # Service 2: Account management (conflicts with user_management)
    account_service = ServiceDefinition(
        service_name="account_management",
        service_description="Account management and billing service",
        business_context="Manages user accounts and billing information",
        keywords=["account", "billing", "user", "payment"],  # "account" and "user" conflict
        synonyms=["person", "customer"],  # "person" conflicts
        tier1_operations={
            "get_account": ServiceOperation(
                endpoint=APIEndpoint(
                    path="/accounts/{id}",
                    method="GET",
                    operation_id="getAccount",
                    description="Get account details"
                ),
                intent_verbs=["get", "retrieve", "fetch"],
                intent_objects=["account", "billing"],
                description="Get account and billing details"
            )
        },
        tier2_operations={}
    )
    
    # Service 3: Incident management (no conflicts - ITSM domain)
    incident_service = ServiceDefinition(
        service_name="incident_management",
        service_description="IT incident tracking and resolution",
        business_context="Manages IT incidents and service disruptions",
        keywords=["incident", "ticket", "issue", "problem_record"],
        synonyms=["service_request", "trouble_ticket"],
        tier1_operations={
            "create_incident": ServiceOperation(
                endpoint=APIEndpoint(
                    path="/incidents",
                    method="POST",
                    operation_id="createIncident",
                    description="Create new incident"
                ),
                intent_verbs=["create", "open", "report"],
                intent_objects=["incident", "ticket", "issue"],
                description="Create a new IT incident ticket"
            )
        },
        tier2_operations={}
    )
    
    # Service 4: Database management (high-severity conflict)
    database_service = ServiceDefinition(
        service_name="database_management",
        service_description="Database administration service",
        business_context="Manages database operations and maintenance",
        keywords=["database", "admin", "management"],
        synonyms=["db", "storage"],
        tier1_operations={},
        tier2_operations={}
    )
    
    # Service 5: Data management (conflicts with database)
    data_service = ServiceDefinition(
        service_name="data_management",
        service_description="Data processing and analytics service",
        business_context="Handles data processing and analytics",
        keywords=["data", "analytics", "database"],  # "database" conflicts
        synonyms=["information", "db"],  # "db" conflicts
        tier1_operations={},
        tier2_operations={}
    )
    
    return {
        "user_management": user_service,
        "account_management": account_service,
        "incident_management": incident_service,
        "database_management": database_service,
        "data_management": data_service
    }


async def test_conflict_detection():
    """Test the conflict detection functionality"""
    print("üß™ Testing Conflict Detection Engine...")
    
    # Create test services
    test_services = create_test_services_with_conflicts()
    
    # Create test registry
    test_registry = ServiceRegistry(
        registry_id="test_conflict_registry",
        version="1.0.0",
        created_timestamp=datetime.utcnow().isoformat(),
        last_updated=datetime.utcnow().isoformat(),
        services=test_services,
        total_services=len(test_services)
    )
    
    # Initialize conflict detector
    detector = ConflictDetector(similarity_threshold=0.8)
    
    # Run conflict detection
    print(f"   Analyzing {len(test_services)} services for conflicts...")
    conflicts = await detector.detect_conflicts(test_registry)
    
    print(f"‚úÖ Conflict detection completed: {len(conflicts)} conflicts found")
    
    # Analyze conflicts by type and severity
    conflict_types = {}
    severity_counts = {"high": 0, "medium": 0, "low": 0}
    
    for conflict in conflicts:
        conflict_type = conflict.conflict_type.value
        severity = conflict.severity.value
        
        if conflict_type not in conflict_types:
            conflict_types[conflict_type] = 0
        conflict_types[conflict_type] += 1
        severity_counts[severity] += 1
        
        print(f"   üî¥ {severity.upper()} - {conflict_type}")
        print(f"      Services: {', '.join(conflict.affected_services)}")
        print(f"      Description: {conflict.description}")
        print(f"      Resolutions: {len(conflict.suggested_resolutions)} suggestions")
        print(f"      Auto-resolvable: {conflict.auto_resolvable}")
        print()
    
    # Summary
    print("üìä Conflict Analysis Summary:")
    print(f"   Total conflicts: {len(conflicts)}")
    print(f"   High severity: {severity_counts['high']}")
    print(f"   Medium severity: {severity_counts['medium']}")
    print(f"   Low severity: {severity_counts['low']}")
    print()
    
    for conflict_type, count in conflict_types.items():
        print(f"   {conflict_type}: {count}")
    
    return conflicts


async def test_itsm_domain_awareness():
    """Test ITSM domain-specific conflict handling"""
    print("üß™ Testing ITSM Domain Awareness...")
    
    # Create ITSM services that should NOT conflict
    incident_service = ServiceDefinition(
        service_name="incident_management",
        service_description="IT incident management",
        business_context="Manages IT incidents",
        keywords=["incident", "ticket", "issue"],
        synonyms=["trouble_ticket", "service_request"],
        tier1_operations={},
        tier2_operations={}
    )
    
    request_service = ServiceDefinition(
        service_name="request_management", 
        service_description="Service request management",
        business_context="Handles service requests",
        keywords=["request", "service_request", "sr"],
        synonyms=["ticket", "req"],  # "ticket" should be OK due to ITSM domain
        tier1_operations={},
        tier2_operations={}
    )
    
    itsm_registry = ServiceRegistry(
        registry_id="itsm_test_registry",
        version="1.0.0",
        created_timestamp=datetime.utcnow().isoformat(),
        last_updated=datetime.utcnow().isoformat(),
        services={
            "incident_management": incident_service,
            "request_management": request_service
        },
        total_services=2
    )
    
    detector = ConflictDetector(similarity_threshold=0.8)
    conflicts = await detector.detect_conflicts(itsm_registry)
    
    print(f"‚úÖ ITSM Domain Test: {len(conflicts)} conflicts found")
    
    if conflicts:
        for conflict in conflicts:
            print(f"   ‚ö†Ô∏è Unexpected conflict: {conflict.description}")
    else:
        print("   ‚úÖ No conflicts detected - ITSM domain awareness working correctly")
    
    return len(conflicts) == 0


async def test_conflict_in_services_method():
    """Test the detect_conflicts_in_services method used by classification API"""
    print("üß™ Testing detect_conflicts_in_services method...")
    
    test_services = create_test_services_with_conflicts()
    detector = ConflictDetector()
    
    conflicts = await detector.detect_conflicts_in_services(test_services)
    
    print(f"‚úÖ detect_conflicts_in_services method: {len(conflicts)} conflicts found")
    
    # Verify conflicts have proper structure
    for conflict in conflicts:
        assert hasattr(conflict, 'conflict_type'), "Conflict should have conflict_type"
        assert hasattr(conflict, 'severity'), "Conflict should have severity"
        assert hasattr(conflict, 'affected_services'), "Conflict should have affected_services"
        assert hasattr(conflict, 'description'), "Conflict should have description"
        assert hasattr(conflict, 'suggested_resolutions'), "Conflict should have suggested_resolutions"
        assert hasattr(conflict, 'auto_resolvable'), "Conflict should have auto_resolvable"
    
    print("   ‚úÖ All conflicts have proper structure")
    return conflicts


async def test_error_handling():
    """Test error handling in conflict detection"""
    print("üß™ Testing error handling...")
    
    detector = ConflictDetector()
    
    # Test with empty registry
    empty_registry = ServiceRegistry(
        registry_id="empty_test",
        version="1.0.0",
        created_timestamp=datetime.utcnow().isoformat(),
        last_updated=datetime.utcnow().isoformat(),
        services={},
        total_services=0
    )
    
    try:
        conflicts = await detector.detect_conflicts(empty_registry)
        print(f"   ‚úÖ Empty registry handled: {len(conflicts)} conflicts")
    except Exception as e:
        print(f"   ‚ùå Empty registry error: {str(e)}")
        return False
    
    # Test with malformed service data
    try:
        conflicts = await detector.detect_conflicts_in_services({})
        print(f"   ‚úÖ Empty services dict handled: {len(conflicts)} conflicts")
    except Exception as e:
        print(f"   ‚ùå Empty services error: {str(e)}")
        return False
    
    print("   ‚úÖ Error handling working correctly")
    return True


async def run_all_conflict_tests():
    """Run all conflict detector tests"""
    print("üöÄ Starting Conflict Detector Engine Tests\n")
    
    try:
        # Test 1: Basic conflict detection
        conflicts = await test_conflict_detection()
        print()
        
        # Test 2: ITSM domain awareness
        itsm_ok = await test_itsm_domain_awareness()
        print()
        
        # Test 3: API method compatibility
        api_conflicts = await test_conflict_in_services_method()
        print()
        
        # Test 4: Error handling
        error_ok = await test_error_handling()
        print()
        
        # Summary
        print("üéâ Conflict Detector Engine Tests Completed!")
        print("‚úÖ Basic conflict detection working")
        print("‚úÖ Multiple conflict types detected (keyword, synonym)")
        print("‚úÖ Severity levels properly assigned")
        print("‚úÖ ITSM domain awareness functional")
        print("‚úÖ API integration method working")
        print("‚úÖ Error handling robust")
        print("‚úÖ Suggested resolutions provided")
        print("‚úÖ Auto-resolution flags set correctly")
        
        # Validate expectations
        assert len(conflicts) > 0, "Should detect conflicts in test data"
        assert len(conflicts) >= 2, "Should detect multiple conflicts"
        assert any(c.severity.value == "high" for c in conflicts), "Should have high-severity conflicts"
        assert itsm_ok, "ITSM domain awareness should work"
        assert error_ok, "Error handling should work"
        
        print(f"\nüìä Final Results:")
        print(f"   Total conflicts detected: {len(conflicts)}")
        print(f"   API method conflicts: {len(api_conflicts)}")
        print(f"   ITSM domain conflicts: {'0 (correct)' if itsm_ok else 'unexpected'}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test suite failed: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(run_all_conflict_tests())
    sys.exit(0 if success else 1)